`timescale 1ns / 1ps

module fifo_tb;

    // Parameters
    parameter DEPTH = 16;
    parameter ADDR_WIDTH = 4;

    // Inputs
    reg clk;
    reg rst;
    reg wr_en;
    reg rd_en;
    reg [7:0] din;

    // Outputs
    wire [7:0] dout;
    wire full;
    wire empty;

    // Instantiate the FIFO
    fifo uut (
        .clk(clk),
        .rst(rst),
        .wr_en(wr_en),
        .rd_en(rd_en),
        .din(din),
        .dout(dout),
        .full(full),
        .empty(empty)
    );

    // Clock generation: 100 MHz
    initial begin
        clk = 0;
        forever #5 clk = ~clk;
    end

    // Stimulus process
    initial begin
        // Initialization
        rst = 1; wr_en = 0; rd_en = 0; din = 0;

        // Apply reset
        #12 rst = 0;

        // ---- Testcase 1: Write 5 values ----
        $display("Writing 5 values...");
        repeat (5) begin
            @(posedge clk);
            wr_en = 1; rd_en = 0;
            din = din + 1;  // 1 to 5
        end

        @(posedge clk); wr_en = 0;

        // ---- Testcase 2: Read 3 values ----
        $display("Reading 3 values...");
        repeat (3) begin
            @(posedge clk);
            rd_en = 1; wr_en = 0;
        end

        @(posedge clk); rd_en = 0;

        // ---- Testcase 3: Simultaneous Read and Write ----
        $display("Simultaneous Read and Write...");
        repeat (4) begin
            @(posedge clk);
            wr_en = 1; rd_en = 1;
            din = din + 1;
        end

        @(posedge clk); wr_en = 0; rd_en = 0;

        // ---- Testcase 4: Read Until Empty ----
        $display("Reading until empty...");
        while (!empty) begin
            @(posedge clk);
            rd_en = 1;
        end

        @(posedge clk); rd_en = 0;

        // ---- Testcase 5: Fill FIFO Completely ----
        $display("Filling FIFO completely...");
        repeat (DEPTH) begin
            @(posedge clk);
            wr_en = 1; rd_en = 0;
            din = din + 1;
        end

        @(posedge clk); wr_en = 0;

        // ---- Testcase 6: Try writing when full ----
        $display("Try writing when FIFO is full...");
        repeat (2) begin
            @(posedge clk);
            wr_en = 1;
            din = 8'hFF;
        end

        @(posedge clk); wr_en = 0;

        // ---- Testcase 7: Read all values out ----
        $display("Read all remaining values...");
        while (!empty) begin
            @(posedge clk);
            rd_en = 1;
        end

        @(posedge clk); rd_en = 0;

        $display("Test complete.");
        $finish;
    end

    // Monitor values
    initial begin
        $monitor("T=%0t | rst=%b wr=%b rd=%b din=%d dout=%d full=%b empty=%b",
                  $time, rst, wr_en, rd_en, din, dout, full, empty);
    end

endmodule
